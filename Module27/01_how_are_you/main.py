import functools
from typing import Any, NoReturn


def how_are_you(func: Any) -> Any:
    """ Декоратор, выводящий не только функцию """
    @functools.wraps(func)
    def how_wrapper(*args, **kwargs):
        print('\nКак дела?', end=' -> ')
        answer = input()
        print('А у меня не очень! Ладно, держи свою функцию.\n')
        func(*args, **kwargs)

    return how_wrapper


@how_are_you
def test() -> None:
    """ Тестовая функция """
    print('<Тут что-то происходит...>')


test()
print(test.__name__)

# ### Что оценивается
# - Результат вычислений корректен.
# - Формат вывода соответствует примеру.
# - Переменные, функции и собственные методы классов имеют значащие имена (не `a`, `b`, `c`, `d`).
# - Классы и методы/функции имеют прописанную документацию.
# - Есть аннотация типов для методов/функций и их аргументов (кроме `args` и `kwargs`). Если функция/метод ничего не возвращает, то используется `None`.
# - Во всех декораторах используется `functools.wraps`.
